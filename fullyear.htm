<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="keywords" content="Pray Time Application V 0.1.0" />
    <meta name="description" content="Experimental Pray Time Application V 0.1.0" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

	<style> 
	#list { width: 1000px; }
	#list span{ float:left;width: 80%; height:20px; }
	#list b{ float:left; width: 20%; height:20px; }
	#timetable td { width: 80px; border:1px solid #ccc;}
    </style>

	<title>Pray Time - Full Year</title>
  </head>
  <body>

	<h4>Pray time - Full Year</h4>
<div id="list">
<b>Timezone</b>
<span id="timezone"></span>
<hr/>
<b>Region</b>
<span id="timezoneId"></span>
<hr/>
</div>
<div id="timelist">
</div>

	
<script>

	var urlParams = new URLSearchParams(window.location.search);
	var latitude = urlParams.get('latitude');
	var longitude = urlParams.get('longitude');
	var dstOffset = urlParams.get('dstOffset');
	var timezone = urlParams.get('timezone');
	var timezoneId = urlParams.get('timezoneId'); 

	var text = "<table id='timetable'><tr><td>Date</td><td>DayOfYear</td><td>Fajr End Time</td><td>Tulu Time</td><td>Asr Time</td><td>Maghrib Time</td><td>Declination</td><td>EoT</td><td>Day Length</td></tr>";
	if(timezone !== dstOffset){
		text = "<h3>Please consider for day light saving (DST)!</h3>" + text;
	} 
	
	var now = new Date();
	for(var i=1; i< 366; i++){
		text += calculateTime(latitude, longitude, dstOffset, new Date(now.getFullYear(),0,i));
	}
	text += "</table>";
	document.getElementById("timelist").innerHTML = text;
	document.getElementById("timezone").innerHTML = "timezone :" +  timezone + " latitude - longitude : " + latitude +" - " + longitude;
	document.getElementById("timezoneId").innerHTML = timezoneId;
	
	function dayOfYear(calculateDate){
		var start = new Date(now.getFullYear(), 0, 0);
		var diff = calculateDate - start;
		var oneDay = 1000 * 60 * 60 * 24;
		var day = Math.floor(diff / oneDay);
		console.log('Day of year: ' + day);
		return day;
	}
	
	function calculateTime(latitude, longitude, timezone, calculateDate){
	
		/* +4 for (2019-2000)/4 = 4.75 (feb 29)*/
		var sina=  360/365 * (dayOfYear(calculateDate) - 81) ; 
		console.log("sina " + sina);
		/*declination calculation*/
		declination = 23.45 *  Math.sin(degToRad(sina));
		console.log("declination " + declination); 
		
		//calculate time correction  https://pveducation.org/pvcdrom/properties-of-sunlight/solar-time
		var B = degToRad(360/365 * ( dayOfYear(calculateDate) - 81)); 
		var EoT = 9.87 * Math.sin(2*B) - 7.53 * Math.cos(B) - 1.5 * Math.sin(B);
		console.log("EoT " + EoT);
        var lstm = 15 * timezone;
        var tc = 4*(longitude - lstm) + EoT;
	 
		var tulutime = tuluTime(longitude,EoT, timezone);
		
		var sunset = sunSet(tulutime,declination);
		var sunrise = sunRise(tulutime,declination);
	 
		return "<tr><td>"+ formatDate(calculateDate)+"</td><td>"+dayOfYear(calculateDate)+"</td><td>"+DecimalToHour(sunrise)+"</td><td>"+ DecimalToHour(tulutime)+"</td><td>" + asrTime(tulutime,sunset)+ "</td><td>" + DecimalToHour(sunset) + "</td><td>" + declination + "</td><td>" + EoT.toFixed(2) + " min </td><td>" +  DecimalToHour(sunset - sunrise)  + "  </td></tr>";
		
	}
	function formatDate(calculateDate){	
		var dd = calculateDate.getDate();
		var mm = calculateDate.getMonth() + 1; //January is 0!

		var yyyy = calculateDate.getFullYear();
		if (dd < 10) {
		  dd = '0' + dd;
		} 
		if (mm < 10) {
		  mm = '0' + mm;
		} 
		return dd + '/' + mm + '/' + yyyy;
	}
	
	
	function sunSet(tulutime, declination)
	{
		var sunset = 4*(90 + declination)
		return  tulutime + sunset;
	}
	
	function sunRise(tulutime, declination)
	{
		var sunrise = 4*(90 + declination)
		return  tulutime - sunrise;
	}
	

	function tuluTime(longitude, EoT, timezone)
	{	
	
		//https://www.esrl.noaa.gov/gmd/grad/solcalc/solareqns.PDF
		if(longitude && EoT){ 
			return 720 - 4 * longitude - EoT  + timezone * 60;
		}
		return 720;
	}
	
	function asrTime(tulutime,sunset)
	{ 
		return DecimalToHour((tulutime+sunset)/2);
	}
	
	function DecimalToHour(value)
	{
		value = value / 60;
		var hour = Math.trunc(value);
		if(hour.toString().length == 1)
			hour = "0"+hour;
		var remain = (value - hour) * 60;
		var mninute = Math.trunc(remain);
		if(mninute.toString().length == 1)
			mninute = "0"+mninute; 
		var seconds = ((remain - mninute) * 60).toFixed(0);
		if(seconds.toString().length == 1)
			seconds = "0"+seconds;
		return hour + ":" + mninute+ ":" + seconds;
	}
	function radToDeg(angleRad)
	{
		return (180 * angleRad / Math.PI);
	}

	function degToRad(angleDeg)
	{
		return (Math.PI * angleDeg / 180);
	}
</script>

  </body>
</html>